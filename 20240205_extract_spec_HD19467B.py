import numpy as np
import matplotlib.pyplot as plt
import os
import astropy.io.fits as fits
import astropy.units as u
from astropy import constants as const
from scipy.signal import correlate2d

import matplotlib
from scipy.ndimage import generic_filter
matplotlib.use('Qt5Agg')

if __name__ == "__main__":
    try:
        import mkl
        mkl.set_num_threads(1)
    except:
        pass

    ####################
    ## To be modified
    ####################
    # Ouput dir for final figures and fits files
    out_png = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/figures"
    # Filename of the files generated by 20240202_spectral_cubeish_extraction.py
    cube_filename_nrs1 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20240201_utils/jw01414004001_02101_nrs1_cube_RDI_20240202.fits"
    cube_filename_nrs2 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20240201_utils/jw01414004001_02101_nrs2_cube_RDI_20240202.fits"
    # refcube_filename_nrs1 = ""
    # refcube_filename_nrs2 = ""
    # NIrcam filter used for flux normalization
    photfilter_name_nrs1 =  "F360M"
    photfilter_name_nrs2 =  "F460M"
    # RA Dec offset of the companion HD19467B
    ra_offset = -1332.871/1000. # ra offset in as
    dec_offset = -875.528/1000. # dec offset in as
        # Offsets for HD 19467 B from https://www.whereistheplanet.com/
        # RA Offset = -1332.871 +/- 10.886 mas
        # Dec Offset = -875.528 +/- 12.360 mas
        # Separation = 1593.703 +/- 9.530 mas
        # PA = 236.712 +/- 0.483 deg
        # Reference: Brandt et al. 2021
    ROLL_REF0 = 65.01
    V3I_YANG = 138.97
    # Flux Calibration parameters
    flux_calib_paras = [-0.03864459,  1.09360589]
    ####################

    wvs = []
    HD19467B_spec = []
    # HD19467B_spec_hpferr = []
    HD19467B_spec_err = []
    HD19467B_spec_speckles = []

    # Define spaxel for extracting speckles
    if 1:
        with fits.open(cube_filename_nrs2) as hdulist:
            flux_cube = hdulist[0].data
            ra_grid = hdulist['RA'].data
            dec_grid = hdulist['DEC'].data
        kmax,lmax = np.unravel_index(np.nanargmax(np.nanmean(flux_cube,axis=0)*(np.sqrt((ra_grid-ra_offset)**2+(dec_grid-dec_offset)**2)<0.1)),flux_cube.shape[1::])
        # kmax,lmax = 42, 33 # fix coordinates
        print(kmax,lmax,ra_grid[kmax,lmax],dec_grid[kmax,lmax])
        r2comp_grid = np.sqrt((ra_grid-ra_grid[kmax,lmax])**2+(dec_grid-dec_grid[kmax,lmax])**2)
        r2star_grid = np.sqrt((ra_grid)**2+(dec_grid)**2)
        sep_comp = np.sqrt(ra_offset**2+dec_offset**2)
        whereannulus = np.where((r2comp_grid>0.3)*(r2comp_grid<0.4))
        # whereannulus = np.where((r2comp_grid>0.3)*(r2star_grid>(sep_comp-0.1))*(r2star_grid<(sep_comp+0.1))*(dec_grid<0.0))
        print(np.size(whereannulus[0]))

    for detect_id, detector in enumerate(["nrs1","nrs2"]):
        if detector == "nrs1":
            cube_filename = cube_filename_nrs1
            # refcube_filename = refcube_filename_nrs1
            photfilter_name = photfilter_name_nrs1
        elif detector == "nrs2":
            cube_filename = cube_filename_nrs2
            # refcube_filename = refcube_filename_nrs2
            photfilter_name = photfilter_name_nrs2

        print(cube_filename)
        with fits.open(cube_filename) as hdulist:
            flux_cube = hdulist[0].data
            fluxerr_cube = hdulist['FLUXERR_CUBE'].data
            ra_grid = hdulist['RA'].data
            dec_grid = hdulist['DEC'].data
            wv_sampling = hdulist['WAVE'].data

        flux_cube = flux_cube*np.polyval(flux_calib_paras, wv_sampling)[:,None,None]
        fluxerr_cube = fluxerr_cube*np.polyval(flux_calib_paras, wv_sampling)[:,None,None]

        if 0: #Mask edges
            flux_im = np.nanmean(flux_cube,axis=0)
            mask = np.ones(flux_im.shape)
            mask[np.where(np.isnan(flux_im))] = np.nan
            nan_mask_boxsize = 3
            mask[np.where(np.isnan(correlate2d(mask,np.ones((nan_mask_boxsize,nan_mask_boxsize)),mode="same")))] = np.nan
            where2mask = np.where(np.isnan(mask))
            flux_cube[:,where2mask[0],where2mask[1]] = np.nan
            fluxerr_cube[:,where2mask[0],where2mask[1]] = np.nan

        if 1:  # Mask the bar from the charge diffusion
            threshold2mask = 0.2
            ny, nx = ra_grid.shape
            bleeding_axis_slope = np.tan(np.deg2rad(+ROLL_REF0+V3I_YANG))
            distances2bleeding = np.abs(ra_grid - bleeding_axis_slope * dec_grid) / np.sqrt(1 + bleeding_axis_slope ** 2)
            # Find the indices of the points within the threshold distance
            where2mask = np.where(distances2bleeding < threshold2mask)
            flux_cube[:,where2mask[0],where2mask[1]] = np.nan
            fluxerr_cube[:,where2mask[0],where2mask[1]] = np.nan

        if 0: #Mask region above the star in the FOV
            ny, nx = ra_grid.shape
            bleeding_axis_slope = np.tan(np.deg2rad(-ROLL_REF0-V3I_YANG))
            distances2bleeding = np.abs(ra_grid - bleeding_axis_slope * dec_grid) / np.sqrt(1 + bleeding_axis_slope ** 2)
            # Find the indices of the points within the threshold distance
            where2mask = np.where(dec_grid > bleeding_axis_slope*ra_grid)
            flux_cube[:,where2mask[0],where2mask[1]] = np.nan
            fluxerr_cube[:,where2mask[0],where2mask[1]] = np.nan

        # if detector == "nrs1":  # Mask an annulus that got messed up in nrs1
        #     r2star_grid = np.sqrt((ra_grid)**2+(dec_grid)**2)
        #     where2mask = np.where((r2star_grid > 1.9)*(r2star_grid < 2.1))
        #     flux_cube[616:621, where2mask[0], where2mask[1]] = np.nan
        #     fluxerr_cube[616:621, where2mask[0], where2mask[1]] = np.nan
        #
        #     print(wv_sampling[616:621])
        #     plt.imshow(flux_cube[616,:,:],origin="lower")
        #     plt.show()

        kmax,lmax = np.unravel_index(np.nanargmax(np.nanmean(flux_cube,axis=0)*(np.sqrt((ra_grid-ra_offset)**2+(dec_grid-dec_offset)**2)<0.1)),flux_cube.shape[1::])
        # kmax,lmax = 42, 33 # fix coordinates
        print(kmax,lmax,ra_grid[kmax,lmax],dec_grid[kmax,lmax])
        speckles = flux_cube[:,whereannulus[0],whereannulus[1]]
        speckle_std = np.nanstd(speckles, axis=1)

        HD19467B_spec_speckles.append(speckles)
        wvs.extend(wv_sampling)
        HD19467B_spec.extend(flux_cube[:,kmax,lmax])
        HD19467B_spec_err.extend(speckle_std)


    wvs=np.array(wvs)
    dwvs = wvs[1::]-wvs[0:np.size(wvs)-1]
    dwvs = np.insert(dwvs,0,dwvs[0])

    HD19467B_spec= np.array(HD19467B_spec)
    HD19467B_spec_err = np.array(HD19467B_spec_err)
    HD19467B_spec_speckles = np.concatenate(HD19467B_spec_speckles, axis=0)

    speckles_median = np.nanmedian(HD19467B_spec_speckles,axis=1)
    def custom_filter(image):
        return np.nanmedian(image)
    kernel_size = int(0.01/np.nanmedian(dwvs))
    if kernel_size % 2 == 0:
        kernel_size += 1
    speckles_median_smooth = generic_filter(speckles_median, custom_filter, [kernel_size])
    HD19467B_spec = HD19467B_spec-speckles_median_smooth

    HD19467B_spec_speckles_hpf = HD19467B_spec_speckles-generic_filter(HD19467B_spec_speckles, custom_filter, [25, 1])
    HD19467B_spec_hpferr = np.nanstd(HD19467B_spec_speckles_hpf,axis=1)

    HD19467B_spec_err[np.where(np.isnan(HD19467B_spec))] = np.nan
    HD19467B_spec_hpferr[np.where(np.isnan(HD19467B_spec))] = np.nan

    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_MJy.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_err))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_hpferr))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()


    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_speckles_MJy.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_speckles))
    hdulist.append(fits.ImageHDU(data=speckles_median_smooth))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()

    # Conversion from MJy to Flambda SI units (u.W * u.m ** -2 / u.um)
    HD19467B_spec_Flambda = (HD19467B_spec * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    speckles_median_smooth_Flambda = (speckles_median_smooth * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    HD19467B_spec_speckles_Flambda = (HD19467B_spec_speckles * u.MJy * const.c / (wvs[:,None] * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    HD19467B_spec_err_Flambda = (HD19467B_spec_err * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    HD19467B_spec_hpferr_Flambda = (HD19467B_spec_hpferr * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value

    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_Flambda.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_Flambda ))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_err_Flambda ))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_hpferr_Flambda ))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()

    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_speckles_Flambda.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_speckles_Flambda))
    hdulist.append(fits.ImageHDU(data=speckles_median_smooth_Flambda))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()


    plt.figure(1)
    for nrs_id, (lmin, lmax) in enumerate([(2.85, 4.3), (4.0, 5.3)]):
        plt.subplot(2, 1, nrs_id + 1)
        plt.plot(wvs, HD19467B_spec, color="#ff9900", label="RDI HD19467B")
        plt.fill_between(wvs,-HD19467B_spec_err, HD19467B_spec_err, color="#ff9900",alpha=0.5)
        plt.fill_between(wvs,-HD19467B_spec_hpferr, HD19467B_spec_hpferr, color="blue",alpha=0.5)
        plt.xlim([lmin, lmax])
        plt.ylim([-0.5e-10, 3e-10])
        plt.legend()
        plt.ylabel("Flux (MJy)")
        plt.xlabel("Wavelength (um)")

    plt.figure(2)
    for nrs_id, (lmin, lmax) in enumerate([(2.85, 4.3), (4.0, 5.3)]):
        plt.subplot(2, 1, nrs_id + 1)
        plt.plot(wvs, HD19467B_spec_Flambda, color="#ff9900", label="RDI HD19467B")
        plt.fill_between(wvs,-HD19467B_spec_err_Flambda, HD19467B_spec_err_Flambda, color="#ff9900",alpha=0.5)
        plt.fill_between(wvs,-HD19467B_spec_hpferr_Flambda, HD19467B_spec_hpferr_Flambda, color="blue",alpha=0.5)
        plt.xlim([lmin, lmax])
        plt.ylim([-2e-17, 5e-17])
        plt.legend()
        plt.ylabel("Flux (W/m2/um)")
        plt.xlabel("Wavelength (um)")
    plt.show()
    exit()

    # External_dir should external files like the NIRCam filters
    external_dir = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/external/"
    # Ouput dir for final figures
    out_png = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/figures"
    # RA Dec offset of the companion HD19467B
    ra_offset = -1332.871/1000. # ra offset in as
    dec_offset = -875.528/1000. # dec offset in as
        # Offsets for HD 19467 B from https://www.whereistheplanet.com/
        # RA Offset = -1332.871 +/- 10.886 mas
        # Dec Offset = -875.528 +/- 12.360 mas
        # Separation = 1593.703 +/- 9.530 mas
        # PA = 236.712 +/- 0.483 deg
        # Reference: Brandt et al. 2021
    # Flux Calibration parameters
    flux_calib_paras = -0.03864459,  1.09360589
    # Absolute fluxes for the host star to be used in calculated flux ratios with the companion.
    HD19467_flux_MJy = {"F250M":3.51e-6, # in MJy, Ref Greenbaum+2023
                         "F300M":2.63e-6,
                         "F335M":2.10e-6,
                         "F360M":1.82e-6,
                         "F410M":1.49e-6,
                         "F430M":1.36e-6,
                         "F460M":1.12e-6}



    if 1: # run matched filter
        # mf_filename_nrs1 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20230626_utils/jw01414004001_02101_nrs1_mf_RDIsubsci_20230703.fits"
        # mf_filename_nrs2 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20230626_utils/jw01414004001_02101_nrs2_mf_RDIsubsci_20230703.fits"
        mf_filename_nrs1 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20230626_utils/jw01414004001_02101_nrs1_mf_RDIsubsci_20230730.fits"
        mf_filename_nrs2 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20230626_utils/jw01414004001_02101_nrs2_mf_RDIsubsci_20230730.fits"


        wvs = []
        HD19467B_spec = []
        # HD19467B_spec_hpferr = []
        HD19467B_spec_err = []
        HD19467B_spec_speckles = []
        for detect_id, (detector,photfilter_name,wv_sampling,mf_filename) in enumerate(zip(["nrs1","nrs2"],[photfilter_name_nrs1,photfilter_name_nrs2],[wv_sampling_nrs1,wv_sampling_nrs2],[mf_filename_nrs1,mf_filename_nrs2])):
            mf_filename_ref = mf_filename.replace("_RDIsubsci_","_ref1_")

            photfilter = os.path.join(external_dir,"JWST_NIRCam."+photfilter_name+".dat")
            filter_arr = np.loadtxt(photfilter)
            trans_wvs = filter_arr[:,0]/1e4
            trans = filter_arr[:,1]
            photfilter_f = interp1d(trans_wvs,trans,bounds_error=False,fill_value=0)
            photfilter_wv0 = np.nansum(trans_wvs*photfilter_f(trans_wvs))/np.nansum(photfilter_f(trans_wvs))
            bandpass = np.where(photfilter_f(trans_wvs)/np.nanmax(photfilter_f(trans_wvs))>0.01)
            photfilter_wvmin,photfilter_wvmax = trans_wvs[bandpass[0][0]],trans_wvs[bandpass[0][-1]]
            print(photfilter_wvmin,photfilter_wvmax)

            # Define planet model grid from BTsettl
            # minwv,maxwv= np.min(dataobj.wavelengths),np.max(dataobj.wavelengths)
            # with h5py.File(os.path.join(utils_dir,"BT-Settl_M-0.0_a+0.0_3-6um_500-2500K.hdf5"), 'r') as hf:
            with h5py.File(os.path.join(external_dir,"BT-Settl_3-6um_Teff500_1600_logg3.5_5.0_NIRSpec_3-6um.hdf5"), 'r') as hf:
                grid_specs = np.array(hf.get("spec"))
                grid_temps = np.array(hf.get("temps"))
                grid_loggs = np.array(hf.get("loggs"))
                grid_wvs = np.array(hf.get("wvs"))
            grid_dwvs = grid_wvs[1::]-grid_wvs[0:np.size(grid_wvs)-1]
            grid_dwvs = np.insert(grid_dwvs,0,grid_dwvs[0])
            filter_norm = np.nansum((grid_dwvs*u.um)*photfilter_f(grid_wvs))
            Flambda = np.nansum((grid_dwvs*u.um)[None,None,:]*photfilter_f(grid_wvs)[None,None,:]*(grid_specs*u.W*u.m**-2/u.um),axis=2)/filter_norm
            Fnu = Flambda*(photfilter_wv0*u.um)**2/const.c # from Flambda back to Fnu
            grid_specs = grid_specs/Fnu[:,:,None].to(u.MJy).value
            myinterpgrid = RegularGridInterpolator((grid_temps,grid_loggs),grid_specs,method="linear",bounds_error=False,fill_value=np.nan)
            rv = 0
            planet_f = interp1d(grid_wvs,myinterpgrid((1100,5.0)), bounds_error=False, fill_value=0)
            comp_spec = planet_f(wv_sampling * (1 - (rv) / const.c.to('km/s').value)) * (u.W / u.m ** 2 / u.um)
            # comp_spec = comp_spec * dataobj_list[0].aper_to_epsf_peak_f(wv_sampling)  # normalized to peak flux
            comp_spec = comp_spec * (wv_sampling * u.um) ** 2 / const.c  # from  Flambda to Fnu
            comp_spec = comp_spec.to(u.MJy).value

            print(mf_filename)
            with fits.open(mf_filename) as hdulist:
                flux_cube = hdulist[0].data
                fluxerr_cube = hdulist[1].data
                flux_map = hdulist[2].data
                fluxerr_map = hdulist[3].data
                snr_map = hdulist[4].data
                ra_grid = hdulist[5].data
                dec_grid = hdulist[6].data

            print(mf_filename_ref)
            with fits.open(mf_filename_ref) as hdulist:
                flux_cube_ref = hdulist[0].data
                fluxerr_cube_ref = hdulist[1].data
                flux_map_ref = hdulist[2].data
                fluxerr_map_ref = hdulist[3].data
                snr_map_ref = hdulist[4].data
                ra_grid_ref = hdulist[5].data
                dec_grid_ref = hdulist[6].data
            # kmax,lmax = np.unravel_index(np.nanargmax(snr_map),snr_map.shape)
            # kmax,lmax = np.unravel_index(np.nanargmax(flux_map),flux_map.shape)
            # kmax,lmax = 21,15
            # kmax,lmax = np.unravel_index(np.nanargmin((ra_grid-(-1.5))**2+(dec_grid-(-0.9))**2),flux_map.shape)
            kmax,lmax = np.unravel_index(np.nanargmax(flux_map*(((ra_grid-(-1.5))**2+(dec_grid-(-0.9))**2)<0.4)),flux_map.shape)
            print(kmax,lmax,ra_grid[kmax,lmax],dec_grid[kmax,lmax])
            r2comp_grid = np.sqrt((ra_grid-ra_grid[kmax,lmax])**2+(dec_grid-dec_grid[kmax,lmax])**2)
            r2star_grid = np.sqrt((ra_grid)**2+(dec_grid)**2)
            whereannulus = np.where((r2comp_grid>0.4)*(r2comp_grid<0.5))
            # wheremask = np.where((r2star_grid<0.3))
            # flux_map[wheremask] = np.nan
            # fluxerr_map[wheremask] = np.nan
            # print(whereannulus)

            if detector=="nrs1":
                flux_cube[1219:1222, kmax, lmax] = np.nan
                flux_cube[114:116, kmax, lmax] = np.nan
            else:
                flux_cube[1672:1676, kmax, lmax] = np.nan

            # plt.plot(flux_cube[:, kmax, lmax])
            # continue

            #plot snr, flux, err maps
            # plt.figure(3)
            #
            # dec_id, ra_id=4,6
            # deno = np.nansum(comp_spec**2 / fluxerr_cube[:, dec_id, ra_id]**2)
            # bbflux = np.nansum(comp_spec * flux_cube[:, dec_id, ra_id] / fluxerr_cube[:, dec_id, ra_id]**2) / deno
            # bbfluxerr = 1 / np.sqrt(deno)
            #
            # res = flux_cube[:, dec_id, ra_id] - bbflux*comp_spec
            # noise_factor = np.nanstd(res/fluxerr_cube[:, dec_id, ra_id])
            #
            # print(flux_map[dec_id, ra_id], bbflux)
            # print(fluxerr_map[dec_id, ra_id],bbfluxerr* noise_factor,bbfluxerr, noise_factor)
            # print(np.nanstd(res))
            #
            # plt.plot(wv_sampling,flux_cube[:, dec_id, ra_id],label="flux_cube")
            # plt.plot(wv_sampling,fluxerr_cube[:, dec_id, ra_id],label="fluxerr_cube")
            # plt.plot(wv_sampling,bbflux*comp_spec,label="comp_spec")
            # plt.plot(wv_sampling,res,label="res")
            # plt.legend()
            # # plt.show()


            plt.figure(1)
            plt.subplot(2,1,detect_id+1)
            print(flux_map[kmax,lmax])
            speckle_std = np.nanstd(flux_cube[:,whereannulus[0],whereannulus[1]],axis=1)
            # plt.fill_between(wv_sampling,flux_cube[:,kmax,lmax]-speckle_std,flux_cube[:,kmax,lmax]+speckle_std,alpha=0.3)
            # plt.fill_between(wv_sampling,flux_cube[:,kmax,lmax]-fluxerr_cube[:,kmax,lmax],flux_cube[:,kmax,lmax]+fluxerr_cube[:,kmax,lmax],alpha=0.3)
            # plt.plot(wv_sampling,flux_cube[:,kmax,lmax],label="RDI spectrum")
            plt.plot(wv_sampling,flux_map[kmax,lmax]*comp_spec,linestyle="--",label="BTsettl 1100K logg=5.0")
            plt.plot(wv_sampling,flux_cube[:,whereannulus[0][0],whereannulus[1][0]],color="grey",alpha=0.05,label="speckles")
            plt.plot(wv_sampling,flux_cube[:,whereannulus[0],whereannulus[1]],color="grey",alpha=0.05)
            plt.plot(wv_sampling,np.nanmedian(flux_cube[:,whereannulus[0],whereannulus[1]],axis=1),color="black",alpha=1)
            HD19467B_spec_speckles.append(flux_cube[:,whereannulus[0],whereannulus[1]])

            wvs.extend(wv_sampling)
            HD19467B_spec.extend(flux_cube[:,kmax,lmax])
            # HD19467B_spec_hpferr.extend(fluxerr_cube[:,kmax,lmax])
            HD19467B_spec_err.extend(speckle_std)

            # for speckle_id in whereannulus[0]:
            #     k,l = np.unravel_index(speckle_id, flux_map.shape)

            # plt.plot(wv_sampling,0.8e-10*comp_spec,linestyle="--")
            # plt.show()

            # filename = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20230626_utils/RDI_psfsub_refPSF1/step3_cube_0.01as/dither_g395h-f290lp_s3d.fits"
            # with fits.open(filename) as hdulist:
            #     cube = hdulist["SCI"].data
            # im = np.nanmean(cube, axis=0)
            # from spectral_cube import SpectralCube
            # tmpcube=SpectralCube.read(filename,hdu=1)
            # wvs=tmpcube.spectral_axis
            # wvs=np.array(wvs)
            # dwvs = wvs[1::]-wvs[0:np.size(wvs)-1]
            # dwvs = np.insert(dwvs,0,dwvs[0])

            plt.figure(2+detect_id)
            plt.subplot(1,3,1)
            plt.title(photfilter_name+" "+detector+" Flux (MJy)")
            plt.imshow(flux_map,origin="lower")
            plt.clim([-1e-10,1e-10])
            plt.colorbar()
            plt.subplot(1,3,3)
            plt.title(photfilter_name+" "+detector+" S/N")
            im_err_2 = np.sqrt(np.nansum(flux_cube_ref**2,axis=0))/flux_cube_ref.shape[0]
            # plt.imshow(flux_map/im_err_2,origin="lower")
            snr_map2 = flux_map/flux_map_ref
            snr_map2 = snr_map2/np.nanstd(snr_map2[np.where(r2comp_grid>0.3)])
            plt.imshow(snr_map2,origin="lower")
            plt.clim([-3,5])
            plt.colorbar()
            plt.subplot(1,3,2)
            fluxerr_map = flux_map/snr_map2
            plt.title(photfilter_name+" "+detector+" 1sigma Error (MJy)")
            plt.imshow(fluxerr_map,origin="lower")
            plt.clim([-1e-10,1e-10])
            plt.colorbar()
            # plt.subplot(2,2,4)
            # plt.imshow(im,origin="lower")

            plt.figure(4)
            sep = r2star_grid[np.where(r2comp_grid>0.3)]
            contrast_5sig = 5*fluxerr_map[np.where(r2comp_grid>0.3)]/HD19467_flux_MJy[photfilter_name]
            plt.scatter(sep,contrast_5sig,s=5,alpha=0.2,label=photfilter_name+" NIRSpec "+detector)
            # seps_Jens = np.load("/stow/jruffio/data/JWST/nirspec/HD_19467/breads/external/ADI_NANNU1_NSUBS1_JWST_NIRCAM_NRCALONG_"+photfilter_name+"_MASKBAR_MASKALWB_SUB320ALWB-KLmodes-all_seps.npy")
            # cons_Jens = np.load("/stow/jruffio/data/JWST/nirspec/HD_19467/breads/external/ADI_NANNU1_NSUBS1_JWST_NIRCAM_NRCALONG_"+photfilter_name+"_MASKBAR_MASKALWB_SUB320ALWB-KLmodes-all_cons.npy")
            # # print(seps_Jens.shape)
            # # print(cons_Jens.shape)
            # # # print(seps_Jens[0])
            # # print(np.nanmin(cons_Jens,axis=0))
            # # print(np.nanmax(cons_Jens,axis=0))
            # # exit()
            # # wherefinite = np.where(np.isfinite(np.nanmin(cons_Jens,axis=0))*np.isfinite(np.nanmax(cons_Jens,axis=0)))
            # # plt.fill_between(seps_Jens[0,wherefinite[0]],np.nanmin(cons_Jens,axis=0)[wherefinite],np.nanmax(cons_Jens,axis=0)[wherefinite],label="KLIP Jens",alpha=1)
            # plt.plot(seps_Jens[0],np.nanmin(cons_Jens,axis=0),label=photfilter_name+" KLIP Jens",alpha=1)
            # # plt.plot(seps_Jens[0],np.nanmax(cons_Jens,axis=0),label="KLIP Jens (max)",alpha=1)
            plt.yscale("log")
            plt.xlim([0,3])
            plt.xlabel("Separation (as)")
            plt.ylabel("Flux ratio (5 sig)")
            plt.legend()

            # plt.figure(5)
            # plt.plot(seps_Jens[0],cons_Jens[0],label="KLIP Jens")
            # plt.show()

            if 1:
                out_filename = os.path.join(out_png, "HD19467B_RDI_" + photfilter_name + "_" + detector + "_SNR.fits")
                hdulist = fits.HDUList()
                hdulist.append(fits.PrimaryHDU(data=snr_map2))
                try:
                    hdulist.writeto(out_filename, overwrite=True)
                except TypeError:
                    hdulist.writeto(out_filename, clobber=True)
                hdulist.close()

                out_filename = os.path.join(out_png, "HD19467B_RDI_" + photfilter_name + "_" + detector + "_flux.fits")
                hdulist = fits.HDUList()
                hdulist.append(fits.PrimaryHDU(data=flux_map))
                try:
                    hdulist.writeto(out_filename, overwrite=True)
                except TypeError:
                    hdulist.writeto(out_filename, clobber=True)
                hdulist.close()

                out_filename = os.path.join(out_png,"HD19467B_RDI_" + photfilter_name + "_" + detector + "_fluxerr.fits")
                hdulist = fits.HDUList()
                hdulist.append(fits.PrimaryHDU(data=fluxerr_map))
                try:
                    hdulist.writeto(out_filename, overwrite=True)
                except TypeError:
                    hdulist.writeto(out_filename, clobber=True)
                hdulist.close()

                out_filename = os.path.join(out_png,"HD19467B_RDI_" + photfilter_name + "_" + detector + "_fluxratioerr_1sig.fits")
                hdulist = fits.HDUList()
                hdulist.append(fits.PrimaryHDU(data=fluxerr_map/HD19467_flux_MJy[photfilter_name]))
                try:
                    hdulist.writeto(out_filename, overwrite=True)
                except TypeError:
                    hdulist.writeto(out_filename, clobber=True)
                hdulist.close()

                out_filename = os.path.join(out_png, "HD19467B_RDI_" + photfilter_name + "_" + detector + "_RADec.fits")
                hdulist = fits.HDUList()
                hdulist.append(fits.PrimaryHDU(data=ra_grid))
                hdulist.append(fits.ImageHDU(data=dec_grid))
                try:
                    hdulist.writeto(out_filename, overwrite=True)
                except TypeError:
                    hdulist.writeto(out_filename, clobber=True)
                hdulist.close()

        wvs=np.array(wvs)
        dwvs = wvs[1::]-wvs[0:np.size(wvs)-1]
        dwvs = np.insert(dwvs,0,dwvs[0])
        HD19467B_spec= np.array(HD19467B_spec)
        # HD19467B_spec_hpferr= np.array(HD19467B_spec_hpferr)
        HD19467B_spec_err = np.array(HD19467B_spec_err)

        HD19467B_spec_speckles = np.concatenate(HD19467B_spec_speckles, axis=0)
        med_speckles = np.nanmedian(HD19467B_spec_speckles,axis=1)
        where_finite = np.where(np.isfinite(med_speckles))
        med_speckles_f = interp1d(wvs[where_finite], med_speckles[where_finite], bounds_error=False, fill_value=0)
        kernel_size = int(0.01/np.nanmedian(dwvs))
        if kernel_size % 2 == 0:
            kernel_size += 1
        regwvs = np.arange(np.nanmin(wvs),np.nanmax(wvs),np.nanmedian(dwvs))
        from scipy.signal import medfilt
        smoothmed_speckles = medfilt(med_speckles_f(regwvs),kernel_size=kernel_size)
        smoothmed_speckles = interp1d(regwvs, smoothmed_speckles, bounds_error=False, fill_value=0)(wvs)


        plt.figure(1)
        for nrs_id,(lmin,lmax) in enumerate([(2.85,4.3),(4.0,5.3)]):
            plt.subplot(2,1,nrs_id+1)
            plt.fill_between(wvs,HD19467B_spec-HD19467B_spec_err,HD19467B_spec+HD19467B_spec_err,color="#ff9900",alpha=0.5)
            plt.plot(wvs,HD19467B_spec,color="#ff9900",label="RDI HD19467B")
            plt.plot(wvs,smoothmed_speckles,color="red",label="smoothmed_speckles")
            plt.xlim([lmin,lmax])
            plt.ylim([-0.5e-10,3e-10])
            plt.legend()
            plt.ylabel("Flux (MJy)")
            plt.xlabel("Wavelength (um)")


            for photfilter_name in HD19467B_flux_MJy.keys():
                photfilter = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/external/JWST_NIRCam." + photfilter_name + ".dat"
                filter_arr = np.loadtxt(photfilter)
                trans_wvs = filter_arr[:, 0] / 1e4
                trans = filter_arr[:, 1]
                photfilter_f = interp1d(trans_wvs, trans, bounds_error=False, fill_value=0)
                photfilter_wv0 = np.nansum(trans_wvs * photfilter_f(trans_wvs)) / np.nansum(photfilter_f(trans_wvs))
                bandpass = np.where(photfilter_f(trans_wvs) / np.nanmax(photfilter_f(trans_wvs)) > 0.01)
                photfilter_wvmin, photfilter_wvmax = trans_wvs[bandpass[0][0]], trans_wvs[bandpass[0][-1]]
                print(photfilter_wvmin, photfilter_wvmax)
                plt.errorbar([photfilter_wv0],HD19467B_flux_MJy[photfilter_name],
                             yerr=np.array([HD19467B_fluxerr_MJy[photfilter_name]]),
                             xerr=np.array([[photfilter_wv0-photfilter_wvmin],[photfilter_wvmax-photfilter_wv0]]),color="#6600ff")#,label=photfilter_name)
            plt.errorbar([photfilter_wv0],HD19467B_flux_MJy[photfilter_name],
                         yerr=np.array([HD19467B_fluxerr_MJy[photfilter_name]]),
                         xerr=np.array([[photfilter_wv0-photfilter_wvmin],[photfilter_wvmax-photfilter_wv0]]),color="#6600ff",label="Photometry Greenbaum+2023")

            for photfilter_name in HD19467B_flux_MJy.keys():
                photfilter = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/external/JWST_NIRCam." + photfilter_name + ".dat"
                filter_arr = np.loadtxt(photfilter)
                trans_wvs = filter_arr[:, 0] / 1e4
                trans = filter_arr[:, 1]
                photfilter_f = interp1d(trans_wvs, trans, bounds_error=False, fill_value=0)
                photfilter_wv0 = np.nansum(trans_wvs * photfilter_f(trans_wvs)) / np.nansum(photfilter_f(trans_wvs))
                bandpass = np.where(photfilter_f(trans_wvs) / np.nanmax(photfilter_f(trans_wvs)) > 0.01)
                photfilter_wvmin, photfilter_wvmax = trans_wvs[bandpass[0][0]], trans_wvs[bandpass[0][-1]]

                filter_norm = np.nansum((dwvs * u.um) * photfilter_f(wvs))
                aper_spec_Flambda = (HD19467B_spec * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um)
                Flambda = np.nansum(
                    (dwvs * u.um) * photfilter_f(wvs) * (aper_spec_Flambda)) / filter_norm
                Fnu = Flambda * (photfilter_wv0 * u.um) ** 2 / const.c  # from Flambda back to Fnu
                Fnu_Mjy = Fnu.to(u.MJy).value
                print(photfilter_name, "{0} MJy ({1:.1f}-{2:.1f}um)".format(Fnu_Mjy,photfilter_wvmin, photfilter_wvmax))

                plt.errorbar([photfilter_wv0], Fnu_Mjy,
                             xerr=np.array([[photfilter_wv0 - photfilter_wvmin], [photfilter_wvmax - photfilter_wv0]]),
                             color="red")  # ,label=photfilter_name
            plt.errorbar([photfilter_wv0], Fnu_Mjy,
                         xerr=np.array([[photfilter_wv0 - photfilter_wvmin], [photfilter_wvmax - photfilter_wv0]]),
                         color="red" ,label="RDI photometry HD19467B")

            photfilter = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/external/Keck_NIRC2.Lp.dat"
            filter_arr = np.loadtxt(photfilter)
            trans_wvs = filter_arr[:, 0] / 1e4
            trans = filter_arr[:, 1]
            photfilter_f = interp1d(trans_wvs, trans, bounds_error=False, fill_value=0)
            photfilter_wv0 = np.nansum(trans_wvs * photfilter_f(trans_wvs)) / np.nansum(photfilter_f(trans_wvs))
            bandpass = np.where(photfilter_f(trans_wvs) / np.nanmax(photfilter_f(trans_wvs)) > 0.01)
            photfilter_wvmin, photfilter_wvmax = trans_wvs[bandpass[0][0]], trans_wvs[bandpass[0][-1]]
            print(photfilter_wvmin, photfilter_wvmax)

            filter_norm = np.nansum((dwvs * u.um) * photfilter_f(wvs))
            aper_spec_Flambda = (HD19467B_spec * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um)
            Flambda = np.nansum(
                (dwvs * u.um) * photfilter_f(wvs) * (aper_spec_Flambda)) / filter_norm
            Fnu = Flambda * (photfilter_wv0 * u.um) ** 2 / const.c  # from Flambda back to Fnu
            Fnu_Mjy = Fnu.to(u.MJy).value
            plt.errorbar([photfilter_wv0], Fnu_Mjy,
                         xerr=np.array([[photfilter_wv0 - photfilter_wvmin], [photfilter_wvmax - photfilter_wv0]]),
                         color="red" )#,label="RDI Lp HD19467B"
            # 0.288±0.037 ×10-16 W m-2 µm-1
            Flambda = 0.288e-16 * u.W * u.m ** -2 / u.um
            Fnu = Flambda * (photfilter_wv0 * u.um) ** 2 / const.c  # from Flambda back to Fnu
            Fnu_Mjy = Fnu.to(u.MJy).value
            plt.errorbar([photfilter_wv0], Fnu_Mjy,
                         xerr=np.array([[photfilter_wv0 - photfilter_wvmin], [photfilter_wvmax - photfilter_wv0]]),
                         color="cyan" ,label="Lp Maire+2020")

        def custom_filter(image):
            return np.nanmedian(image)
        from scipy.ndimage import generic_filter
        HD19467B_spec_speckles_hpf = HD19467B_spec_speckles-generic_filter(HD19467B_spec_speckles, custom_filter, [25, 1])
        HD19467B_spec_hpferr = np.nanstd(HD19467B_spec_speckles_hpf,axis=1)

        out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum.fits")
        hdulist = fits.HDUList()
        hdulist.append(fits.PrimaryHDU(data=wvs))
        hdulist.append(fits.ImageHDU(data=HD19467B_spec*np.polyval([-0.03128495, 1.09007397], wvs)))
        hdulist.append(fits.ImageHDU(data=HD19467B_spec_err*np.polyval([-0.03128495, 1.09007397], wvs)))
        hdulist.append(fits.ImageHDU(data=HD19467B_spec_hpferr*np.polyval([-0.03128495, 1.09007397], wvs)))
        try:
            hdulist.writeto(out_filename, overwrite=True)
        except TypeError:
            hdulist.writeto(out_filename, clobber=True)
        hdulist.close()

        out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_bkgsub.fits")
        hdulist = fits.HDUList()
        hdulist.append(fits.PrimaryHDU(data=wvs))
        hdulist.append(fits.ImageHDU(data=(HD19467B_spec-smoothmed_speckles)*np.polyval([-0.03128495, 1.09007397], wvs)))
        hdulist.append(fits.ImageHDU(data=HD19467B_spec_err*np.polyval([-0.03128495, 1.09007397], wvs)))
        hdulist.append(fits.ImageHDU(data=HD19467B_spec_hpferr*np.polyval([-0.03128495, 1.09007397], wvs)))
        try:
            hdulist.writeto(out_filename, overwrite=True)
        except TypeError:
            hdulist.writeto(out_filename, clobber=True)
        hdulist.close()

        out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_speckles.fits")
        hdulist = fits.HDUList()
        hdulist.append(fits.PrimaryHDU(data=wvs))
        hdulist.append(fits.ImageHDU(data=HD19467B_spec_speckles*np.polyval([-0.03128495, 1.09007397], wvs)[:,None]))
        hdulist.append(fits.ImageHDU(data=smoothmed_speckles*np.polyval([-0.03128495, 1.09007397], wvs)))
        try:
            hdulist.writeto(out_filename, overwrite=True)
        except TypeError:
            hdulist.writeto(out_filename, clobber=True)
        hdulist.close()

        plt.show()
        exit()