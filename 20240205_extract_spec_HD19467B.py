import numpy as np
import matplotlib.pyplot as plt
import os
import astropy.io.fits as fits
import astropy.units as u
from astropy import constants as const
from scipy.signal import correlate2d

import matplotlib
from scipy.ndimage import generic_filter
matplotlib.use('Qt5Agg')

if __name__ == "__main__":
    try:
        import mkl
        mkl.set_num_threads(1)
    except:
        pass

    ####################
    ## To be modified
    ####################
    # Ouput dir for final figures and fits files
    out_png = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/figures"
    # Filename of the files generated by 20240202_spectral_cubeish_extraction.py
    cube_filename_nrs1 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20240201_utils/jw01414004001_02101_nrs1_cube_RDI_20240202.fits"
    cube_filename_nrs2 = "/stow/jruffio/data/JWST/nirspec/HD_19467/breads/20240201_utils/jw01414004001_02101_nrs2_cube_RDI_20240202.fits"
    # refcube_filename_nrs1 = ""
    # refcube_filename_nrs2 = ""
    # NIrcam filter used for flux normalization
    photfilter_name_nrs1 =  "F360M"
    photfilter_name_nrs2 =  "F460M"
    # RA Dec offset of the companion HD19467B
    ra_offset = -1332.871/1000. # ra offset in as
    dec_offset = -875.528/1000. # dec offset in as
        # Offsets for HD 19467 B from https://www.whereistheplanet.com/
        # RA Offset = -1332.871 +/- 10.886 mas
        # Dec Offset = -875.528 +/- 12.360 mas
        # Separation = 1593.703 +/- 9.530 mas
        # PA = 236.712 +/- 0.483 deg
        # Reference: Brandt et al. 2021
    ROLL_REF0 = 65.01
    V3I_YANG = 138.97
    # Flux Calibration parameters
    flux_calib_paras = [-0.03864459,  1.09360589]
    ####################

    wvs = []
    HD19467B_spec = []
    # HD19467B_spec_hpferr = []
    HD19467B_spec_err = []
    HD19467B_spec_speckles = []

    # Define spaxel for extracting speckles
    if 1:
        with fits.open(cube_filename_nrs2) as hdulist:
            flux_cube = hdulist[0].data
            ra_grid = hdulist['RA'].data
            dec_grid = hdulist['DEC'].data
        kmax,lmax = np.unravel_index(np.nanargmax(np.nanmean(flux_cube,axis=0)*(np.sqrt((ra_grid-ra_offset)**2+(dec_grid-dec_offset)**2)<0.1)),flux_cube.shape[1::])
        # kmax,lmax = 42, 33 # fix coordinates
        print(kmax,lmax,ra_grid[kmax,lmax],dec_grid[kmax,lmax])
        r2comp_grid = np.sqrt((ra_grid-ra_grid[kmax,lmax])**2+(dec_grid-dec_grid[kmax,lmax])**2)
        r2star_grid = np.sqrt((ra_grid)**2+(dec_grid)**2)
        sep_comp = np.sqrt(ra_offset**2+dec_offset**2)
        whereannulus = np.where((r2comp_grid>0.3)*(r2comp_grid<0.4))
        # whereannulus = np.where((r2comp_grid>0.3)*(r2star_grid>(sep_comp-0.1))*(r2star_grid<(sep_comp+0.1))*(dec_grid<0.0))
        print(np.size(whereannulus[0]))

    for detect_id, detector in enumerate(["nrs1","nrs2"]):
        if detector == "nrs1":
            cube_filename = cube_filename_nrs1
            # refcube_filename = refcube_filename_nrs1
            photfilter_name = photfilter_name_nrs1
        elif detector == "nrs2":
            cube_filename = cube_filename_nrs2
            # refcube_filename = refcube_filename_nrs2
            photfilter_name = photfilter_name_nrs2

        print(cube_filename)
        with fits.open(cube_filename) as hdulist:
            flux_cube = hdulist[0].data
            fluxerr_cube = hdulist['FLUXERR_CUBE'].data
            ra_grid = hdulist['RA'].data
            dec_grid = hdulist['DEC'].data
            wv_sampling = hdulist['WAVE'].data

        flux_cube = flux_cube*np.polyval(flux_calib_paras, wv_sampling)[:,None,None]
        fluxerr_cube = fluxerr_cube*np.polyval(flux_calib_paras, wv_sampling)[:,None,None]

        if 0: #Mask edges
            flux_im = np.nanmean(flux_cube,axis=0)
            mask = np.ones(flux_im.shape)
            mask[np.where(np.isnan(flux_im))] = np.nan
            nan_mask_boxsize = 3
            mask[np.where(np.isnan(correlate2d(mask,np.ones((nan_mask_boxsize,nan_mask_boxsize)),mode="same")))] = np.nan
            where2mask = np.where(np.isnan(mask))
            flux_cube[:,where2mask[0],where2mask[1]] = np.nan
            fluxerr_cube[:,where2mask[0],where2mask[1]] = np.nan

        if 1:  # Mask the bar from the charge diffusion
            threshold2mask = 0.2
            ny, nx = ra_grid.shape
            bleeding_axis_slope = np.tan(np.deg2rad(+ROLL_REF0+V3I_YANG))
            distances2bleeding = np.abs(ra_grid - bleeding_axis_slope * dec_grid) / np.sqrt(1 + bleeding_axis_slope ** 2)
            # Find the indices of the points within the threshold distance
            where2mask = np.where(distances2bleeding < threshold2mask)
            flux_cube[:,where2mask[0],where2mask[1]] = np.nan
            fluxerr_cube[:,where2mask[0],where2mask[1]] = np.nan

        if 0: #Mask region above the star in the FOV
            ny, nx = ra_grid.shape
            bleeding_axis_slope = np.tan(np.deg2rad(-ROLL_REF0-V3I_YANG))
            distances2bleeding = np.abs(ra_grid - bleeding_axis_slope * dec_grid) / np.sqrt(1 + bleeding_axis_slope ** 2)
            # Find the indices of the points within the threshold distance
            where2mask = np.where(dec_grid > bleeding_axis_slope*ra_grid)
            flux_cube[:,where2mask[0],where2mask[1]] = np.nan
            fluxerr_cube[:,where2mask[0],where2mask[1]] = np.nan

        # if detector == "nrs1":  # Mask an annulus that got messed up in nrs1
        #     r2star_grid = np.sqrt((ra_grid)**2+(dec_grid)**2)
        #     where2mask = np.where((r2star_grid > 1.9)*(r2star_grid < 2.1))
        #     flux_cube[616:621, where2mask[0], where2mask[1]] = np.nan
        #     fluxerr_cube[616:621, where2mask[0], where2mask[1]] = np.nan
        #
        #     print(wv_sampling[616:621])
        #     plt.imshow(flux_cube[616,:,:],origin="lower")
        #     plt.show()

        kmax,lmax = np.unravel_index(np.nanargmax(np.nanmean(flux_cube,axis=0)*(np.sqrt((ra_grid-ra_offset)**2+(dec_grid-dec_offset)**2)<0.1)),flux_cube.shape[1::])
        # kmax,lmax = 42, 33 # fix coordinates
        print(kmax,lmax,ra_grid[kmax,lmax],dec_grid[kmax,lmax])
        speckles = flux_cube[:,whereannulus[0],whereannulus[1]]
        speckle_std = np.nanstd(speckles, axis=1)

        HD19467B_spec_speckles.append(speckles)
        wvs.extend(wv_sampling)
        HD19467B_spec.extend(flux_cube[:,kmax,lmax])
        HD19467B_spec_err.extend(speckle_std)


    wvs=np.array(wvs)
    dwvs = wvs[1::]-wvs[0:np.size(wvs)-1]
    dwvs = np.insert(dwvs,0,dwvs[0])

    HD19467B_spec= np.array(HD19467B_spec)
    HD19467B_spec_err = np.array(HD19467B_spec_err)
    HD19467B_spec_speckles = np.concatenate(HD19467B_spec_speckles, axis=0)

    speckles_median = np.nanmedian(HD19467B_spec_speckles,axis=1)
    def custom_filter(image):
        return np.nanmedian(image)
    kernel_size = int(0.01/np.nanmedian(dwvs))
    if kernel_size % 2 == 0:
        kernel_size += 1
    speckles_median_smooth = generic_filter(speckles_median, custom_filter, [kernel_size])
    HD19467B_spec = HD19467B_spec-speckles_median_smooth

    HD19467B_spec_speckles_hpf = HD19467B_spec_speckles-generic_filter(HD19467B_spec_speckles, custom_filter, [25, 1])
    HD19467B_spec_hpferr = np.nanstd(HD19467B_spec_speckles_hpf,axis=1)

    HD19467B_spec_err[np.where(np.isnan(HD19467B_spec))] = np.nan
    HD19467B_spec_hpferr[np.where(np.isnan(HD19467B_spec))] = np.nan

    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_MJy.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_err))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_hpferr))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()


    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_speckles_MJy.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_speckles))
    hdulist.append(fits.ImageHDU(data=speckles_median_smooth))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()

    # Conversion from MJy to Flambda SI units (u.W * u.m ** -2 / u.um)
    HD19467B_spec_Flambda = (HD19467B_spec * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    speckles_median_smooth_Flambda = (speckles_median_smooth * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    HD19467B_spec_speckles_Flambda = (HD19467B_spec_speckles * u.MJy * const.c / (wvs[:,None] * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    HD19467B_spec_err_Flambda = (HD19467B_spec_err * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value
    HD19467B_spec_hpferr_Flambda = (HD19467B_spec_hpferr * u.MJy * const.c / (wvs * u.um) ** 2).to(u.W * u.m ** -2 / u.um).value

    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_Flambda.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_Flambda ))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_err_Flambda ))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_hpferr_Flambda ))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()

    out_filename = os.path.join(out_png, "HD19467b_RDI_1dspectrum_speckles_Flambda.fits")
    hdulist = fits.HDUList()
    hdulist.append(fits.PrimaryHDU(data=wvs))
    hdulist.append(fits.ImageHDU(data=HD19467B_spec_speckles_Flambda))
    hdulist.append(fits.ImageHDU(data=speckles_median_smooth_Flambda))
    try:
        hdulist.writeto(out_filename, overwrite=True)
    except TypeError:
        hdulist.writeto(out_filename, clobber=True)
    hdulist.close()


    plt.figure(1)
    for nrs_id, (lmin, lmax) in enumerate([(2.85, 4.3), (4.0, 5.3)]):
        plt.subplot(2, 1, nrs_id + 1)
        plt.plot(wvs, HD19467B_spec, color="#ff9900", label="RDI HD19467B")
        plt.fill_between(wvs,-HD19467B_spec_err, HD19467B_spec_err, color="#ff9900",alpha=0.5)
        plt.fill_between(wvs,-HD19467B_spec_hpferr, HD19467B_spec_hpferr, color="blue",alpha=0.5)
        plt.xlim([lmin, lmax])
        plt.ylim([-0.5e-10, 3e-10])
        plt.legend()
        plt.ylabel("Flux (MJy)")
        plt.xlabel("Wavelength (um)")

    plt.figure(2)
    for nrs_id, (lmin, lmax) in enumerate([(2.85, 4.3), (4.0, 5.3)]):
        plt.subplot(2, 1, nrs_id + 1)
        plt.plot(wvs, HD19467B_spec_Flambda, color="#ff9900", label="RDI HD19467B")
        plt.fill_between(wvs,-HD19467B_spec_err_Flambda, HD19467B_spec_err_Flambda, color="#ff9900",alpha=0.5)
        plt.fill_between(wvs,-HD19467B_spec_hpferr_Flambda, HD19467B_spec_hpferr_Flambda, color="blue",alpha=0.5)
        plt.xlim([lmin, lmax])
        plt.ylim([-2e-17, 5e-17])
        plt.legend()
        plt.ylabel("Flux (W/m2/um)")
        plt.xlabel("Wavelength (um)")
    plt.show()
    exit()